#Week 1: Intro / What is Security?
What are the three basic properties of programs/systems used in Computer Security?	<b>1. Correctness</b>: For a given input, program must provide correct output<br><b>2. Safety</b>: Well-formed programs cannot have bad outputs, no matter the input<br><b>3. Robustness</b>: Programs must be able to cope with errors in execution
Name the core security properties (at least 5).	<b>1. Confidentiality</b>: keep data private<br><b>2. Integrity</b>: system and data have not been improperly altered<br><b>3. Availability</b>: ability to use the system as anticipated<br><b>4. Privacy</b>: controlling information revealed by data<br><b>5. Authenticity</b>: verifying the source/author<br><b>6. Anonymity</b>: hiding identity when using a system<br><b>7. Non-repudiation</b>: inability to deny sending/receiving a message<br><b>8. Plausible deniability</b>: ability to deny sending a message<br><b>9. Forward secrecy</b>: preventing decryption of past messages
What is the difference between confidentiality and privacy?	<b>Confidentiality</b> focuses on keeping data secret, while <b>privacy</b> focuses on controlling what information is revealed by data even when the data is accessible.
What are the two approaches to security and their pros/cons?	<b>1. Binary approach</b>: system is either secure or insecure<br>   - Pros: longevity<br>   - Cons: brittle, hard to define "right", expensive<br><br><b>2. Risk Management approach</b>: system is secure to an acceptable level<br>   - Pros: adaptive (adjusts based on situation)<br>   - Cons: creates an arms race, hard to evaluate risks and effectiveness
What are the key components to consider when creating a threat model?	<b>1. Threats</b>: who is the adversary and their capabilities/motivation<br><b>2. Vulnerabilities</b>: where can the system break<br><b>3. Likelihood</b>: probability of threat occurring<br><b>4. Impact</b>: what happens if security is breached<br><b>5. Protection</b>: cost and methods of security<br><b>6. Goals</b>: usability of the system
What is a "resourceful strategic adversary"?	An adversary that chooses the optimal way to leverage their resources (strategy) to mount an attack. Consider what they can <b>observe</b>, <b>corrupt</b>, <b>influence</b>, <b>modify</b>, or <b>control</b>.
What does the STRIDE model help you identify?	STRIDE helps identify threats to a system:<br><b>S</b>poofing: Pretending to be someone else<br><b>T</b>ampering: Modifying data inappropriately<br><b>R</b>epudiation: Denying responsibility for actions<br><b>I</b>nformation disclosure: Unauthorized access to data<br><b>D</b>enial of service: Exhausting resources needed for service<br><b>E</b>levation of privilege: Gaining unauthorized permissions
How would you define a "secure system"?	A secure system is one that meets a specific security policy. More precisely, it's a system where there is a <b>security argument</b> that an adversary constrained by a specific threat model cannot violate the security policy.
Why is usability important in security?	Systems can be technically secure but practically insecure if users find security measures too complex, unclear, or interfering with their goals. Users may try to circumvent security mechanisms that are too complex.
What are some reasons for unintentional security failures by users?	<b>1.</b> Users lack intuition about complex computing devices<br><b>2.</b> Users are in charge of their own complex devices<br><b>3.</b> Hard for users to estimate risks (wrong mental model)<br><b>4.</b> Security measures feel like they get in the way<br><b>5.</b> Time constraints

#Week 2: Principles and Background
What are the 8 classic security design principles (ELLF COPS)?	<b>E</b>conomy of Mechanism: Keep design simple and small<br><b>L</b>east Privilege: Minimum privileges needed to complete job<br><b>L</b>east Common Mechanism: Share as little as possible among users<br><b>F</b>ail-safe Default: Deny access by default<br><b>C</b>omplete Mediation: Check every access to every object every time<br><b>O</b>pen Design: Design shouldn't be secret (no security by obscurity)<br><b>P</b>sychological Acceptability: Should be easy to use<br><b>S</b>eparation of Privilege: Access based on more than one piece of information
What additional security design principles should be considered beyond the classic 8?	<b>1. Defense in Depth</b>: Having multiple security measures<br><b>2. Design for Updating</b>: Plan for safe installation of security updates<br><b>3. Prudent Paranoia</b>: Never underestimate adversary effort<br><b>4. Privacy Promotion</b>: Don't collect more data than necessary
What is the Trusted Computing Base (TCB)?	The TCB refers to every component of a system upon which the security policy relies. If something in the TCB goes wrong, the security policy may be violated. It needs to be kept small.
What are the 3 main steps in a web request?	<b>1. Find content host</b> (get IP address via DNS)<br><b>2. Request Content</b> (via routing through the internet backbone)<br><b>3. Receive Content</b> (server sends response packets that are reconstructed)
How does DNS work?	DNS (Domain Name System) finds the IP address for a server by:<br>- Starting with TLD (top level domain)<br>- Querying the next level and finally the last level<br>- DNS results are cached by web browsers<br>- Root servers are hard coded<br>- Routing is used to find name servers
What is a packet and what does it contain?	A packet is a unit of data sent across a network. It contains:<br>- Source IP address<br>- Destination IP address<br>- TTL (time to live) to prevent infinite loops<br>- Protocol (TCP/UDP)<br>- Data payload<br>- Header information

#Week 3: Confidentiality
What is the difference between a code and a cipher in cryptography?	A <b>code</b> is a semantic translation (A means B), while a <b>cipher</b> is an encryption of underlying plaintext.
What capabilities and motivations should be considered in the threat model for encryption?	<b>Motivations</b>:<br>- Recover key: learn all future plaintexts<br>- Recover plaintext: learn this specific plaintext<br>- Distinguish plaintext: learn a single bit about plaintext<br><br><b>Capabilities</b>:<br>- Known ciphertext: know ciphertext<br>- Known algorithm: know scheme used to encrypt<br>- Known plaintext: have information about plaintext<br>- Chosen plaintext: adversary picked plaintext<br>- Chosen ciphertext: adversary picked ciphertext
What is frequency analysis and how can it break monoalphabetic substitution ciphers?	Frequency analysis exploits the known distribution of letters in a language to identify substituted letters in encrypted text. For example, 'E' is the most common letter in English, so the most common letter in ciphertext might represent 'E'.
What makes a one-time pad "perfect" and what are its limitations?	A one-time pad is theoretically unbreakable because any ciphertext could decrypt to any plaintext if you use the right key. <b>Limitations</b>: the key must be truly random, as long as the plaintext, used only once, and securely shared beforehand.
What is the difference between stream ciphers and block ciphers?	<b>Stream ciphers</b> encrypt/decrypt data one bit or byte at a time, similar to a one-time pad with a pseudorandom key stream.<br><b>Block ciphers</b> encrypt/decrypt data in fixed-size blocks (e.g., 128 bits) at a time.
How does the Diffie-Hellman key exchange work?	Diffie-Hellman allows two parties to establish a shared secret key over an insecure channel:<br>1. Alice and Bob agree on public values g and p<br>2. Alice generates private value a, computes A = g^a mod p, sends A to Bob<br>3. Bob generates private value b, computes B = g^b mod p, sends B to Alice<br>4. Alice computes shared key K = B^a mod p = g^(ab) mod p<br>5. Bob computes shared key K = A^b mod p = g^(ab) mod p<br>6. They both arrive at the same key without ever sharing their private values
What are the key differences between symmetric and asymmetric (public key) encryption?	<b>Symmetric encryption</b>: Both parties use the same key for encryption and decryption<br><b>Public key encryption</b>: Uses two different keys - a public key for encryption and a private key for decryption
How does RSA encryption work?	RSA encryption involves:<br>1. <b>Key generation</b>: Choose primes p,q, compute N=p×q, select e,d such that e×d=1 mod φ(N)<br>2. <b>Encryption</b>: c = m^e mod N<br>3. <b>Decryption</b>: m = c^d mod N<br>Where φ(N)=(p-1)×(q-1), public key is (N,e), private key is (N,d)
What is a hybrid encryption scheme and why is it used?	Hybrid encryption uses both asymmetric and symmetric encryption:<br>1. Generate a random symmetric session key<br>2. Encrypt the session key with recipient's public key<br>3. Encrypt the actual message with the session key<br>This combines the security of public key cryptography with the efficiency of symmetric encryption.

#Week 4: Integrity
What is the key difference between digital signatures and public key encryption?	Digital signatures use the keys in the opposite way: the private key is used to sign (create the signature) and the public key is used to verify. This provides authentication and non-repudiation.
What properties must a digital signature have?	<b>1. Correctness</b>: Valid signatures using valid keys will verify properly<br><b>2. Unforgeability</b>: An adversary cannot produce new signatures that verify without knowing the private key
What is a Message Authentication Code (MAC) and how does it differ from a digital signature?	A MAC is a tag generated for a message using a secret key. It provides message integrity and authentication but uses symmetric keys (both parties need the same key). Digital signatures use asymmetric keys and provide non-repudiation.
What are the different ways to combine encryption and MAC for authenticated encryption?	<b>1. Encrypt-and-MAC (E&M)</b>: Send encrypted message and MAC of original message<br><b>2. Encrypt-then-MAC (EtM)</b>: Encrypt message, then MAC the ciphertext<br><b>3. MAC-then-Encrypt (MtE)</b>: MAC the message, then encrypt both message and MAC
What are the main properties of a cryptographic hash function?	<b>1. Pre-image resistance</b>: Given hash h, hard to find message m such that H(m) = h<br><b>2. Collision resistance</b>: Hard to find two different inputs x and y where H(x) = H(y)<br><b>3. Fixed output length</b>: Produces fixed-size output regardless of input size<br><b>4. Deterministic</b>: Same input always produces same output<br><b>5. Uniformity</b>: Small changes in input cause large changes in output
Why are rainbow tables effective against unsalted password hashes?	Rainbow tables contain precomputed hash values for common passwords. Without salting, identical passwords hash to identical values, so an attacker can quickly check if any hashed password matches entries in their table.
What is a salt and how does it protect against rainbow table attacks?	A salt is a random value added to a password before hashing. With salting, identical passwords hash to different values because they have different salts. This means an attacker must compute hashes for each salt value separately.
What is the purpose of a Certificate Authority (CA) in a PKI?	A Certificate Authority validates and signs digital certificates, confirming that a particular public key belongs to a specific entity. Browsers trust CAs and use their public keys to verify certificate signatures.
What happens during an SSL/TLS handshake?	<b>1.</b> Client sends "hello" with supported encryption methods<br><b>2.</b> Server responds with chosen method and its certificate<br><b>3.</b> Client verifies certificate with CA's public key<br><b>4.</b> Client generates session key, encrypts it with server's public key, sends to server<br><b>5.</b> Server decrypts to get session key<br><b>6.</b> Both use session key for symmetric encryption of subsequent communication

#Week 5: Availability and Malware
What is the difference between a DoS bug and a DoS flood?	<b>DoS bug</b>: A design flaw that allows one machine to disrupt a service<br><b>DoS flood</b>: Using a large number of machines (botnet) to generate requests that overwhelm a server
How does a SYN flood attack work?	In a SYN flood:<br>1. Attacker sends many TCP SYN packets (connection requests)<br>2. Server allocates resources and responds with SYN-ACK<br>3. Attacker never completes the handshake with ACK<br>4. Server's connection queue fills up, preventing legitimate connections<br>5. Often uses spoofed source IP addresses
What are syncookies and how do they help prevent SYN flood attacks?	Syncookies are a technique where the server:<br>1. Generates a cryptographic cookie based on client info (instead of storing connection state)<br>2. Sends this as the sequence number in SYN-ACK<br>3. Only allocates resources when client returns a valid ACK<br>This prevents the server from running out of resources during a SYN flood.
Name three approaches to DoS mitigation.	<b>1. Client Puzzles</b>: Require computational work to slow down attackers<br><b>2. CAPTCHAs</b>: Verify connection is from a human<br><b>3. Source Identification</b>: Track packet origins through techniques like ingress filtering and traceback
What are the limitations of client puzzles for DoS protection?	<b>1.</b> Requires changes to both clients and servers<br><b>2.</b> Hurts low-power legitimate clients during attacks<br><b>3.</b> Difficult to scale puzzle difficulty appropriately (high-end servers are thousands of times more powerful than mobile devices)
What is a botnet and how is it controlled?	A botnet is a network of compromised computers (bots) controlled by an attacker. It's controlled through Command and Control (C&C) servers that bots contact to report status or receive commands. C&C can be centralized or peer-to-peer.
What are the different types of malware?	Types of malware include:<br><b>- Virus</b>: Infects other programs by modifying them<br><b>- Worm</b>: Self-replicates over a network<br><b>- Trojan Horse</b>: Appears useful but performs malicious activities<br><b>- Spyware</b>: Monitors user behavior without consent<br><b>- Keylogger</b>: Records keystrokes<br><b>- Rootkit</b>: Disguises existence of malicious programs
How do rootkits operate at different levels?	<b>User-space rootkits</b>: Replace system programs with trojaned versions<br><b>Kernel rootkits</b>: Modify kernel data structures to hide processes, files, and network activities

#Week 6: Human-Centered Security
What does it mean to take a human-centered approach to security?	It means:<br><b>1.</b> Understanding how people interact with technology<br><b>2.</b> Identifying user limitations to avoid asking people to do impossible tasks<br><b>3.</b> Finding opportunities to incorporate people into security systems<br><b>4.</b> Designing systems that manage human constraints to reduce risk<br><b>5.</b> Considering people as partners, not enemies
What are some cognitive biases that impact security behavior?	<b>- Optimism bias</b>: Underestimating personal risk<br><b>- Anchoring</b>: Sticking with first choice/decision<br><b>- Hyperbolic time discounting</b>: Placing lower value on long-term risks compared to short-term rewards<br><b>- Consensus bias</b>: Assuming others think/act like you do
What are common limitations of security warnings?	<b>1.</b> Users become desensitized to frequent warnings<br><b>2.</b> False positives are too common<br><b>3.</b> Users lack awareness of threats<br><b>4.</b> Warnings compete for limited attention resources<br><b>5.</b> Warnings may not be noticed due to attention focus elsewhere
What are the "5 Es" of system usability?	<b>1. Effectiveness</b>: Support users in completing actions accurately<br><b>2. Efficiency</b>: Users can perform tasks quickly through easiest process<br><b>3. Engagement</b>: Users find it pleasant to use<br><b>4. Error Tolerance</b>: Support range of user actions with genuine error handling<br><b>5. Ease of Learning</b>: New users can accomplish goals easily
How can we help users with security?	<b>1.</b> Understand processes "in the wild," not in "ideal world"<br><b>2.</b> Provide simple, low-cost actions<br><b>3.</b> Identify barriers/obstacles<br><b>4.</b> Make systems/processes usable<br><b>5.</b> Consider affordances in design<br><b>6.</b> Use signifiers to communicate appropriate behavior<br><b>7.</b> Provide feedback on actions

#Week 7: Authentication
Why shouldn't passwords be stored in plaintext?	Storing passwords in plaintext means anyone who gains access to the password file can see all the passwords. This creates unnecessary risk if the file is compromised.
Why are salts used in password storage and how do they work?	Salts are random values added to passwords before hashing. Even if two users have the same password, the hashed values will be different because they have different salts. This prevents rainbow table attacks and makes dictionary attacks more difficult.
What is the difference between session cookies and persistent cookies?	<b>Session cookies</b> exist only during the current browser session and are deleted when the browser is shut down<br><b>Persistent cookies</b> are saved until a server-defined expiration date and remain even after the browser is closed
What are the three main categories of authentication factors?	<b>1. Something you know</b> (passwords, PINs, security questions)<br><b>2. Something you have</b> (security tokens, cards, mobile devices)<br><b>3. Something you are</b> (biometrics like fingerprints, face, voice)
What are the advantages and disadvantages of biometric authentication?	<b>Advantages</b>:<br>- Nothing to remember<br>- Passive authentication<br>- Cannot be shared<br>- Unique to one person<br><br><b>Disadvantages</b>:<br>- Difficult to revoke/change if compromised<br>- Can be invasive<br>- Private but not necessarily secret (can be captured)<br>- False match probability increases with database size
What is phishing and how does it work?	Phishing is an attack that impersonates a legitimate source (often via email) to trick users into:<br>- Clicking on malicious links<br>- Entering credentials on fake websites<br>- Downloading malware<br>- Revealing sensitive information
What is password reuse and why is it a security problem?	Password reuse is when users use the same password across multiple accounts. It's a security problem because if one site is compromised, attackers can try the same credentials on other sites, potentially gaining access to many accounts.
What is a challenge-response protocol?	A security protocol where one party presents a question ("challenge") and another party must provide a valid answer ("response") to be authenticated. The response is typically generated by encrypting the challenge with a shared key.
How does a one-time password (OTP) system work?	OTP systems generate temporary passwords that are valid only for a single login session. They can be based on time (requires synchronization) or based on mathematical algorithms. They provide an additional security layer beyond regular passwords.

#Week 8: Access Control
What are the four types of file access rights?	<b>1. Execute</b>: cannot alter/observe<br><b>2. Read</b>: can observe/cannot alter<br><b>3. Append</b>: can alter/cannot observe<br><b>4. Write</b>: can alter/observe
What is an Access Control List (ACL) and how does it work?	An Access Control List is a list of permissions attached to an object (like a file). For each object, there's a list of users/groups and their respective access rights. When a user requests access, the reference monitor checks the ACL to see if the user has appropriate rights.
What are the three user IDs associated with a UNIX process?	<b>1. Effective User ID (EUID)</b>: Determines permissions for the process<br><b>2. Real User ID (RUID)</b>: Determines user that started the process<br><b>3. Saved User ID (SUID)</b>: EUID prior to any changes
What are the three main types of access control policies?	<b>1. Mandatory Access Control (MAC)</b>: Permissions assigned by system policy<br><b>2. Discretionary Access Control (DAC)</b>: Owner sets permissions<br><b>3. Role-Based Access Control (RBAC)</b>: Permissions based on roles within organization
What is the purpose of the SETUID bit in UNIX permissions?	The SETUID bit allows a user to run an executable with the permissions of the file owner rather than the executing user. This enables regular users to temporarily elevate privileges for specific authorized tasks.
What are the UNIX permissions for directories and what do they mean?	<b>Read (r)</b>: See what is in the directory<br><b>Write (w)</b>: Modify each file in directory<br><b>Execute (x)</b>: Traverse the directory and access subdirectories
What is the sticky bit (T) in UNIX permissions?	The sticky bit for a directory changes write privileges so that users can rename or delete files only if they are the owner (or root). It's commonly used for shared directories where multiple users can create files.
What is the "root" user in UNIX systems?	The root user (UID 0) is the default owner of all system files with complete system access. It protects users from themselves and is important in multi-user systems. Root can change to any user ID and has full system privileges.

#Week 9: Security Examples
What is a buffer overflow and why is it dangerous?	A buffer overflow occurs when a program writes data beyond its allocated memory buffers. It's dangerous because it can:<br>- Overwrite other variables<br>- Corrupt data<br>- Modify the return address to execute arbitrary code<br>- Give attackers control of the system with program's privileges
What is shellcode in the context of buffer overflow attacks?	Shellcode is malicious code that an attacker includes in their input to be executed when a buffer overflow occurs. It's called "shellcode" because it traditionally spawns a command shell, giving the attacker control over the system.
What is a NOP sled and why is it used in buffer overflow attacks?	A NOP sled is a sequence of NOP (no-operation) instructions placed before shellcode. It's used because the attacker might not know the exact memory address of their shellcode. As long as they jump anywhere in the NOP sled, execution will "slide" to the shellcode.
What is SQL injection and how can it be prevented?	SQL injection is an attack where malicious SQL code is inserted into input fields to manipulate a database. Prevention methods include:<br>- Parameterized queries that separate commands from input<br>- Input sanitization to ensure only safe input is accepted<br>- Proper escaping and encoding of user input
What is the difference between XSS and CSRF attacks?	<b>XSS (Cross-Site Scripting)</b>:<br>- Server-side vulnerability<br>- Attacker injects a script into a trusted website<br>- Browser executes attacker's script<br><br><b>CSRF (Cross-Site Request Forgery)</b>:<br>- Server-side vulnerability<br>- Attacker gets trusted browser to issue requests<br>- Website executes attacker's requests
What is the Same-Origin Policy and why is it important?	The Same-Origin Policy restricts how documents or scripts from one origin can interact with resources from another origin. It's important because it prevents malicious sites from accessing sensitive data or performing actions on behalf of the user on other sites.
How does TOR (The Onion Router) provide anonymity?	TOR encrypts data through multiple layers and routes it through a series of nodes. Each node only knows the previous and next node in the chain, not the complete path. The layers of encryption are peeled off one by one (like an onion) as the data passes through each node, making it difficult to trace the origin.
What are iframes and how can they enable clickjacking?	Iframes allow content from one site to be embedded into another. In clickjacking, an attacker frames a legitimate site and covers part of it to create unintended interactions. For example, transparent overlays might trick users into clicking something different than what they see.